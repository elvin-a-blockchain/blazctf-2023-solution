// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

import "forge-std/Test.sol";
import "../src/Challenge.sol";

contract ChallengeTest is Test {
    Challenge public challenge;
    ET public et;
    address public player;

    function setUp() public {
        player = address(this);
        challenge = new Challenge(player);
        et = challenge.et();
    }

    function testInitialState() public {
        assertEq(challenge.PLAYER(), player, "Player address should match");
        assertFalse(challenge.isSolved(), "Challenge should not be solved initially");

        for (uint160 i = 0; i < 10; i++) {
            assertEq(et.ownerOf(i), address(i), "Initial tokens should be owned by addresses 0-9");
        }
    }

    function testSolveChallenge() public {
        for (uint256 i = 0; i < 20; i++) {
            et.mint(player, i);
        }

        challenge.solve();
        assertTrue(challenge.isSolved(), "Challenge should be solved");
    }
}
